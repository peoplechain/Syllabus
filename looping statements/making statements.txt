5 Looping and Statements

5.1 Introduction to Control Structures

Definition and Importance:

1.Control structures are fundamental to programming as they dictate the flow of a program.
2.Decision-making is crucial for creating dynamic and responsive programs.
3.The if statement is a fundamental tool for making decisions in C programming.
4.It allows the execution of specific code blocks based on whether a condition is true or false.
5.Proper use of if statements, including understanding condition expressions, logical operators, and nested structures, is crucial for writing effective and readable C programs.

The if Statement

Basic Usage:

The if statement allows the program to execute a block of code only if a specified condition is true.

-----------------------syntax---------------------------------------

if (condition) {
    // Code to be executed if condition is true
}

--------------------------------------------------------------------

Condition Expressions:

Conditions typically involve comparison operators (==, !=, >, <, >=, <=).


-------------------------example - vs code - file - if.c ------------------------------

Explanation:

Start: The program begins execution.

Variable Initialization: x is set to 10.

Condition Check: The if statement checks if x is greater than 5.

Condition: x > 5 → 10 > 5 → true
True Branch: Since the condition is true, the program executes the code inside the if block.

Output: The message "x is greater than 5" is printed to the console.

End: The program finishes execution after printing the message.

------------------------------------------------------------------------


5.2 if else

The if-else Statement
Basic Usage:

The if-else statement allows the program to choose between two paths of execution based on a condition.

if condition is true means if block executed orelse condition false means else block executed.


-----------------------syntax---------------------------------------

if (condition) {
    // Code to be executed if condition is true
} else {
    // Code to be executed if condition is false
}


--------------------------------------------------------------------

-------------------------example - vs code - file - ifelse.c------------------------------

Explanation:

Start: The program begins execution.

Variable Initialization: age is set to 18.

Condition Check: The if statement checks if age is greater than or equal to 18.

Condition: age >= 18 → 18 >= 18 → true
True Branch Execution: Since the condition is true, the program executes the code inside the if block.

Output: The message "You are eligible to vote." is printed to the console.
False Branch Skipped: The else block is skipped because the condition was true.

End: The program finishes execution after printing the message.

------------------------------------------------------------------------


5.3 if else if

The if-else if Statement

Basic Usage:

The if-else if statement allows the program to choose between multiple paths of execution based on multiple conditions.

if condition is true means if block executed orelse checks one more condition which declarte in else if block ,is that condition true means else if block executed,like way its goes on .is any condition is satisfied means else block executed.

-----------------------syntax---------------------------------------

if (condition1) {
    // Code to be executed if condition1 is true
} else if (condition2) {
    // Code to be executed if condition2 is true
} else {
    // Code to be executed if all conditions are false
}


--------------------------------------------------------------------

-------------------------example - vs code - file - ifelseif.c------------------------------

Explanation:

Start: The program begins execution.

Variable Initialization: x is set to 10.

First Condition Check: if (x > 5) → 10 > 5 → true.

Executes the code block inside the if statement.
Outputs: "x is greater than 5".
Other Conditions:

The else if (x == 5) and else blocks are skipped because the first condition was true.
End: The program finishes execution after printing the message.


------------------------------------------------------------------------


5.4 Nested if

Nested if-else Statements
Basic Usage:

Nested if-else statements involve placing one if-else statement inside another.
This allows for multiple levels of conditions to be checked.

-----------------------syntax-----------------------------------

if (condition1) {
    if (condition2) {
        // Code to be executed if condition1 and condition2 are true
    } else {
        // Code to be executed if condition1 is true and condition2 is false
    }
} else {
    // Code to be executed if condition1 is false
}

--------------------------------------------------------------------


-------------------------------example - vs code - file - nestedif.c -------------------------------------

Start: The program begins execution.

Variable Initialization: x is set to 10.

Outer Condition Check: if (x > 5) → 10 > 5 → true.

Executes the code block inside the outer if statement.
Inner Condition Check: if (x == 10) → 10 == 10 → true.

Executes the code block inside the inner if statement.

-------------------------------------------------------------------------


5.5 Switch case

Switch-Case Statement:

1 Expression:

The switch-case statement begins with an expression (often an integer or a character) whose value is evaluated against various case labels.

2 Case Labels:

Each case label specifies a constant value or a range of values that the expression might match.

3 Code Blocks:

When a match is found between the expression and a case label, the corresponding block of code associated with that case is executed.

4 Default Case (Optional):

The default case is optional and provides a block of code to execute when none of the case labels match the value of the expression.

5 Break Statement:

After executing a block of code associated with a case label, the break statement is used to exit the switch-case statement. Without a break, execution will continue to the next case (known as fall-through).

--------------------------------syntax------------------------------

switch (expression) {
    case constant1:
        // Code to be executed if expression == constant1
        break;
    case constant2:
        // Code to be executed if expression == constant2
        break;
    ...
    default:
        // Code to be executed if no match is found
}

-----------------------------------------------------------------------


-------------------------------example - vs code - file - switch.c------------------------------------

Explanation:

Expression: day is evaluated in the switch statement.
Case Labels: Each case label (1, 2, 3, 4, 5) represents a possible value of day.
Code Blocks: Depending on the value of day, the corresponding weekday name is printed.
Default Case: If day does not match any of the specified case labels (1 to 5), the default case prints "Weekend".
Break Statement: Each case block ends with a break statement to exit the switch statement after executing the corresponding block of code.

-----------------------------------------------------------------------


5.6 for loop

In programming, specifically in languages like C, C++, Java, and others, a for loop is a control flow statement that allows repeated execution of a block of statements based on a specified condition. It is particularly useful when the number of iterations (repetitions) is known beforehand or can be determined during runtime.

--------------------------------syntax------------------------------

for (initialization; condition; update) {
    // Code to be executed in each iteration
}

----------------------------------------------------------------------

-------------------------------example - vs code - file - for.c------------------------------------

Start: The program begins execution.
Variable Initialization: i is initialized to 1.
For Loop Execution:
Iterates from 1 to 5.
Prints each value of i followed by a space (1 2 3 4 5 ).
Newline Output: After the loop completes, prints a newline character (\n).
End: The program returns 0, indicating successful execution.

--------------------------------------------------------------------------

5.7 Nested for loop


In programming, a nested for loop refers to the situation where one for loop is nested inside another. This construct allows for repetitive execution of a block of statements within another block of statements. Nested loops are often used to iterate over multi-dimensional arrays or perform operations that require repeated actions within other repeated actions.

Key Components of Nested For Loop:

Outer Loop:

The outer loop encloses the inner loop and controls how many times the inner loop will execute.
It typically initializes and updates a loop control variable that determines the number of iterations.

Inner Loop:

The inner loop is contained within the outer loop and executes its statements repeatedly for each iteration of the outer loop.
It has its own initialization, condition, and update statements.

--------------------------------syntax------------------------------

for (initialization1; condition1; update1) {
    // Outer loop body
    for (initialization2; condition2; update2) {
        // Inner loop body
    }
}


----------------------------------------------------------------------

-------------------------------example - vs code - file - nestedfor.c------------------------------------

Explanation:

Outer Loop Initialization: i is initialized to 1.
Outer Loop Condition Check: Checks if i <= 3 (true).
Inner Loop Initialization: j is initialized to 1.
Inner Loop Condition Check: Checks if j <= 3 (true).
Inner Loop Execution: Executes printf("%d ", i * j); (outputs 1 2 3 for i = 1).
Inner Loop Update: j increments to 2.
Repeat Inner Loop Execution: Outputs 2 4 6 for i = 1.
Inner Loop Update and Repeat: Outputs 3 6 9 for i = 1.
Outer Loop Update: i increments to 2.
Repeat Steps 3-9 for i = 2 and i = 3.
Complete Execution: Outputs the final result:

--------------------------------------------------------------------------


5.7 while loop

In programming, a while loop is a control flow statement that allows a block of code to be executed repeatedly based on a specified condition. It continues to execute the block as long as the condition remains true. 

Key Components of While Loop:

Condition:

An expression that is evaluated before each iteration of the loop.
If the condition evaluates to true (true or a non-zero value), the loop body is executed.
If false (false or zero), the loop terminates.

--------------------------------syntax------------------------------

while (condition) {
    // Statements to be executed repeatedly
}


----------------------------------------------------------------------

-------------------------------example - vs code - file - while.c------------------------------------

Explanation:

Initialization: i is initialized to 1.

Condition Check: Checks if i <= 5 (true).

Execute Loop Body: Prints 1 (outputs 1), increments i to 2.

Condition Check: Checks if i <= 5 (true).

Execute Loop Body: Prints 2 (outputs 2), increments i to 3.

Repeat Steps 4-5: Continues executing the loop body until i reaches 6.

Condition Check: Checks if i <= 5 (false, terminates the loop).

End: Program exits the loop and proceeds to execute printf("\n");.

Output: Outputs 1 2 3 4 5 followed by a newline (\n).

--------------------------------------------------------------------------

5.8 Do while loop

Definition of Do-While Loop:

In programming, a do-while loop is a control flow statement that executes a block of code at least once, and then repeatedly executes the block based on a specified condition. Unlike the while loop, which tests the condition before entering the loop, the do-while loop tests the condition after executing the loop body.

Key Components of Do-While Loop:

Execution of Loop Body:

The block of statements inside the loop is executed once first, regardless of the condition.
Condition:

An expression that is evaluated after each execution of the loop body.
If the condition evaluates to true (true or a non-zero value), the loop continues executing.
If false (false or zero), the loop terminates.

--------------------------------syntax------------------------------

do {
    // Statements to be executed repeatedly
} while (condition);


----------------------------------------------------------------------

-------------------------------example - vs code - file - dowhile.c------------------------------------

Explanation:

Initialization: i is initialized to 1.

Execute Loop Body: Prints 1 (outputs 1), increments i to 2.

Condition Check: Checks if i <= 5 (true).

Repeat Steps 2-3: Continues executing the loop body until i reaches 6.

Condition Check: Checks if i <= 5 (false, terminates the loop).

End: Program exits the loop and proceeds to execute printf("\n");.

Output: Outputs 1 2 3 4 5 followed by a newline (\n).

--------------------------------------------------------------------------

key theoretical differences between while and do-while loops:

Execution Order:

While Loop: In a while loop, the condition is evaluated before the execution of the loop body. If the condition is initially false, the loop body may never execute.
Do-While Loop: In a do-while loop, the loop body is executed at least once before the condition is evaluated. This ensures that the loop body executes at least once, regardless of the condition.


5.9 Break, continue and goto

5.9.1 Break Statement

Definition:

The break statement is a control flow statement in programming languages like C, C++, and others. It is used to immediately terminate the execution of the innermost loop (for, while, or do-while) or switch statement in which it appears. When encountered, break causes control to exit the loop or switch statement and resume execution at the next statement after the loop or switch.

syntax:

break;

----------------------------------------------------------------------


5.9.2 Continue Statement

Definition:

The continue statement is a control flow statement used to skip the current iteration of a loop (for, while, or do-while) and proceed to the next iteration. It causes the loop to immediately jump to the next iteration's condition check or loop body execution, bypassing any remaining code within the current iteration.

syntax:

continue;

----------------------------------------------------------------------


5.9.3 Goto Statement

Definition:

The goto statement is a control flow statement in C that allows transferring control to a specified label within the same function or within the same file scope. It provides an unconditional jump to a specified statement, skipping any code in between. The use of goto is generally discouraged in modern programming practices due to its potential to create complex and hard-to-maintain code.

--------------------------------syntax------------------------------

goto label;

label:
    // Statements

----------------------------------------------------------------------





--------------------------------------example - vs code - file - pass.c---------------------------------------

Explanation:

Using break statement:

Purpose: Exit the loop immediately when i equals 3.
Output: Prints numbers from 1 to 2.
Flow of Execution:
Starts the loop with i = 1.
Prints 1.
Increments i to 2, prints 2.
Encounters break;, exits the loop.

Using continue statement:

Purpose: Skip printing 3 and continue with the next iteration.
Output: Prints numbers from 1 to 5, excluding 3.
Flow of Execution:
Starts the loop with i = 1.
Prints 1.
Increments i to 2, prints 2.
Encounters continue; when i = 3, skips printing 3.
Continues with i = 4, prints 4.
Continues with i = 5, prints 5.

Using goto statement:

Purpose: Implement a loop using goto statement to jump back to the label start.
Output: Prints numbers from 1 to 5.
Flow of Execution:
Initializes j = 1.
Prints 1.
Increments j to 2, prints 2.
Continues until j is 6.
Prints newline (\n) and exits the loop.


Break: Terminates the loop immediately when a condition (i == 3) is met.
Continue: Skips the remaining code in the current iteration (i == 3) and continues with the next iteration.
Goto: Jumps to a specified label (start) unconditionally, allowing for non-sequential execution within the loop.

----------------------------------------------------------------------









