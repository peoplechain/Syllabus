1. ASCII Character Codes

Definition: 

ASCII (American Standard Code for Information Interchange) is a character encoding standard used to represent text in computers and other devices that use text. It encodes 128 specified characters into seven-bit integers.

Character Set: 

ASCII includes 33 non-printing control characters (such as carriage return, line feed, and null character) and 95 printable characters, which include letters (both uppercase and lowercase), digits, punctuation marks, and special symbols.

Usage and Compatibility: A

SCII serves as the basis for most modern character encoding systems and ensures compatibility across different devices and platforms by providing a standardized way to represent text. It is especially significant in early computing and data transmission standards.

1.Uppercase Letters as 65 to 90
2.Lowercase Letters as 97 to 122
3.Digits as 48 to 57


2. In C programming, the printf() function is used to output formatted text to the standard output (usually the screen). The format specifiers in printf() dictate how the subsequent arguments are formatted. 

------------------------------printf() format specifiers table ----------------------



3. In C programming, the scanf() function is used for input, reading formatted data from the standard input (usually the keyboard). It uses format specifiers to interpret the input data and store the values in the provided variable addresses. 

These specifiers are used in the format string of scanf() to parse the input and store it into the corresponding variables. It's crucial to provide the correct variable addresses for each specifier, using the & operator except for strings (arrays).

------------------------------scanf() format specifiers table ----------------------




4.Functions for character input and output


In C programming, several functions are available for handling character input and output. These functions are part of the C standard library, typically included via the <stdio.h> header. Below are the key functions used for character input and output.

------------------------------i/o functions table ----------------------



5.String functions



 Here's a table format summarizing common string handling functions in C, including their syntax and descriptions. These functions are part of the C Standard Library, typically found in the <string.h> header file.

------------------------------String functions table ----------------------


6.Math functions


in C, typically included in the <math.h> header file. These functions cover a range of mathematical operations and are widely used in scientific and engineering applications.


------------------------------Math functions table ----------------------


7.Utility functions


Utility functions in C, often included in the <stdlib.h> and other standard library headers, provide essential operations for tasks like memory allocation, process control, searching, sorting, and converting data types. 


------------------------------Utility functions table ----------------------



8. Diagnostic functions


The assert in C is a diagnostic tool used to test assumptions made by the program and to identify logical errors during development. When the condition evaluated by assert is false, it generates an error message and terminates the program. This is particularly useful for catching bugs early in the development cycle by ensuring that certain conditions hold true.

-------------------------------------syntax--------------------------------

#include <assert.h>

assert(expression);

----------------------------------------------------------------------------------

How assert Works:

When the expression in the assert statement evaluates to false:

The program prints an error message including the expression, the source file name, and the line number where the assert failed.
The program terminates by calling abort().
When the expression is true, the assert macro has no effect, and the program continues execution normally.


9. Argument Functions


The <stdarg.h> header in C provides a set of macros for handling functions with a variable number of arguments.The macros defined in <stdarg.h> allow functions to accept and process a variable number of arguments. This is achieved through the va_list type and the macros va_start, va_arg, and va_end, which manage the argument list's state and allow access to each argument.


------------------------------Argument functions table ----------------------



10.Date and Time Functions in C


The <time.h> header provides functionality for manipulating and formatting date and time in C. Below is a comprehensive overview of the time-related functions, variables, and format specifiers used with strftime().


------------------------------Time and Clock Functions table ----------------------

------------------------------Time and Clock Variables table ----------------------



11. All type of format specifiers for time functions

strftime() uses format specifiers to format the date and time. Below is a table of common format specifiers:


------------------------------Format Specifiers table -------------------------------


12. Jump functions

The setjmp.h header file provides the definitions for the setjmp and longjmp functions, which facilitate non-local jumps in C. These functions are primarily used for error handling and recovery in complex programs.


------------------------------Jump functions table 
-------------------------------


13. Limit & float Contants

In C programming, various standard libraries define constants that specify limits for fundamental data types and system-specific properties. These limits are defined in headers like <limits.h>, <float.h>, and <stdint.h>.

------------------------------Limit & float Contants table -------------------------------













