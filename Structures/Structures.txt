9 Structures

In C programming, a struct (short for structure) is a user-defined data type that allows you to combine different data types into a single unit. Structures are particularly useful for grouping related data together. Here's how to define and use structures in C, including the syntax and a simple example program.

9.1 Declaration of Structure

To define a structure, you use the struct keyword followed by the structure name and the structure members enclosed in curly braces.

-----------------------------------syntax----------------------------------

struct structure_name {
    data_type member1;
    data_type member2;
    // More members...
};

struct: Keyword used to declare a structure.
structure_name: Name of the structure (optional but recommended for clarity).
member1, member2, ... : Members of the structure, each with its own data type.
---------------------------------------------------------------------------


9.2 Variable declaration

Once a structure is declared, you can declare variables of that structure type. There are two main ways to do this:

9.2.1 Separate Declaration:

Declare the structure first and then declare variables of that structure type.

-----------------------------------syntax----------------------------------

// Declare variables of the structure type
struct structure_name variable1, variable2;

---------------------------------------------------------------------------

9.2.2 Combined Declaration:

Declare the structure and variables of that structure type in one step.

-----------------------------------syntax----------------------------------

struct structure_name {
    data_type member1;
    data_type member2;
    // More members...
} variable1, variable2;


---------------------------------------------------------------------------


----------------------------vs code - struct.c----------------------------

Explanation:


1.Include Header File:

#include <stdio.h>: Include the standard input-output header file.

2.Define Structure:

struct Student: Define a structure named Student with members name, age, gpa, a, and b.

3.coords: Declare a variable coords of type struct Student.
Enter main Function:

Execution starts from the main function.

4.Declare student1 Variable:

struct Student student1;: Declare a variable student1 of type struct Student.

5.Input Student's Name:

printf("Enter student's name: ");: Print the prompt for the student's name.
fgets(student1.name, 50, stdin);: Read up to 49 characters from the standard input and store them in student1.name.

6.Input Student's Age:

printf("Enter student's age: ");: Print the prompt for the student's age.
scanf("%d", &student1.age);: Read an integer from the standard input and store it in student1.age.

7.Input Student's GPA:

printf("Enter student's GPA: ");: Print the prompt for the student's GPA.
scanf("%f", &student1.gpa);: Read a floating-point number from the standard input and store it in student1.gpa.

8.Display Student Information:

printf("\nStudent Information:\n");: Print the header for the student information.
printf("Name: %s", student1.name);: Print the student's name.
printf("Age: %d\n", student1.age);: Print the student's age.
printf("GPA: %.2f\n\n", student1.gpa);: Print the student's GPA to two decimal places.

9.Assign and Print Coordinates:

coords.a = 10;: Assign the value 10 to coords.a.
coords.b = 20;: Assign the value 20 to coords.b.
printf("The coordinate a: %d\n", coords.a);: Print the value of coords.a.
printf("The coordinate b: %d", coords.b);: Print the value of coords.b.

10.End of main Function:

return 0;: The main function returns 0, indicating successful execution, and the program terminates.



9.3 Define typedef structures

In C, typedef is used to create alias names for data types, which can make code more readable and easier to manage. When used with structures, typedef can simplify the syntax for declaring variables of that structure type.

In C programming, the dot operator (.) is used to access members of a structure . It allows you to refer to a specific variable or field with the syntax of outer-structure.inner-structure.member.

------------------------------syntax-----------------------------------

typedef struct {
    data_type member1;
    data_type member2;
    // More members...
} alias_name;

-----------------------------------------------------------------------

------------------------------example vs code typedef.c------------------

Explanation:

1.Structure Definitions:

typedef struct { int x; int y; } Point;
typedef struct { Point center; float radius; } Circle;
typedef struct { Point topLeft; Point bottomRight; } Rectangle;

2.Main Function Execution:

3.Circle Initialization:

Circle myCircle; // Declares a variable myCircle of type Circle.
myCircle.center.x = 10; // Sets the x-coordinate of the circle's center.
myCircle.center.y = 15; // Sets the y-coordinate of the circle's center.
myCircle.radius = 5.5; // Sets the radius of the circle.

4.Rectangle Initialization:

Rectangle myRect; // Declares a variable myRect of type Rectangle.
myRect.topLeft.x = 3; // Sets the x-coordinate of the top-left corner of the rectangle.
myRect.topLeft.y = 8; // Sets the y-coordinate of the top-left corner of the rectangle.
myRect.bottomRight.x = 15; // Sets the x-coordinate of the bottom-right corner of the rectangle.
myRect.bottomRight.y = 20; // Sets the y-coordinate of the bottom-right corner of the rectangle.

5.Printing Circle Details:

printf("Circle Center: (%d, %d)\n", myCircle.center.x, myCircle.center.y); // Prints the coordinates of the circle's center.
printf("Circle Radius: %.2f\n", myCircle.radius); // Prints the radius of the circle.

6.Printing Rectangle Details:

printf("Rectangle Top-Left: (%d, %d)\n", myRect.topLeft.x, myRect.topLeft.y); // Prints the coordinates of the top-left corner of the rectangle.
printf("Rectangle Bottom-Right: (%d, %d)\n", myRect.bottomRight.x, myRect.bottomRight.y); // Prints the coordinates of the bottom-right corner of the rectangle.

7.End of Program:

return 0; // Indicates successful execution of the program.


9.4 Using Pointers in structures

In C programming, structures (struct) and pointers (*) are fundamental concepts for organizing and manipulating data efficiently. Let's delve into the concepts used in your example without focusing on the specific code implementation.

9.4.1 Structures (struct)

Definition: 

A structure (struct) is a composite data type that allows you to group together variables of different types under a single name.

Declaration: 

After defining a structure, you can declare variables of that structure type, just like primitive data types.


-----------------------syntax---------------------------------------

typedef struct {
   data_type *pointer_variable;   
} alias_name;


------------------------------------------------------------------

---------------------------------------------------------------------

difference table for pointer and array in structures in drawio.com

---------------------------------------------------------------------


------------------------------vs code strptr.c ------------------------------------


Explanation:

1.Structure Definitions and Initializations:

Two structures are defined using typedef: 

ArrType (holding an array of characters) and PtrType (holding a pointer to a character).
Variables arr and ptr of these respective types are initialized with initial values.

2.Printing Initial Values:

printf("\nArray string is a %s", arr.str); prints the initial value of arr.str, which is "Bad ".
printf("\nPointer string is a %s", ptr.str); prints the initial value of ptr.str, which is "Good ".

3.Modifying arr.str:

Individual characters of arr.str are modified to spell "Idea" (arr.str[0] = 'I';, arr.str[1] = 'd';, etc.).

4.Printing Modified arr.str:

printf("%s\n", arr.str); prints the modified arr.str, which now contains "Idea".

5.Modifying ptr.str:

ptr.str = "Idea"; assigns a new string "Idea" to ptr.str.

6.Printing Modified ptr.str:

printf("%s\n", ptr.str); prints the modified ptr.str, which now also contains "Idea".

7.Program Completion:

The main() function completes execution, returning 0 to indicate successful program completion.


9.5 Pointing to structures

Pointing to structures in C involves using pointers to reference and manipulate data stored in structures. This capability is particularly useful for dynamically allocating memory, passing structures between functions efficiently, and accessing nested structures or arrays within structures. 

The arrow operator (->) in C is used primarily for accessing members of a structure through a pointer to that structure or union. Here are two key points about the arrow operator:


-------------------------------differance table for -> and .(dot) drawio.com-------


-----------------------------syntax------------------------------------

pointer->member

pointer: Should be a pointer to a structure type.
member: Represents a member of the structure that pointer points to.

--------------------------------------------------------------------------

----------------------------vs code mem.c ----------------------------

Explanation:

1.Main Function Start:

The program starts with including necessary headers (stdio.h) and defines a structure Point with members x and y.
main() function begins.

2.Structure Variable Declaration and Initialization:

A structure variable myPoint of type Point is declared and initialized with values 10 for x and 20 for y.

3.Pointer Declaration and Initialization:

A pointer ptrPoint to a Point structure is declared and initialized to point to myPoint using the address-of operator (&).

4.Printing Original Values:

The original values of myPoint (x = 10 and y = 20) are printed using printf.

5.Modifying Structure Members via Pointer:

Structure members x and y are modified indirectly through ptrPoint using the arrow operator (->).
ptrPoint->x is set to 15.
ptrPoint->y is set to 25.

6.Printing Modified Values:

The modified values of myPoint (x = 15 and y = 25) are printed using printf.

7.Program Completion:

main() function returns 0, indicating successful program execution.



9.6 Passing structures to functions

Passing structures to functions in C can be done in two primary ways: by value and by reference (using pointers). Here’s a brief overview, along with the syntax and a simple example program for each method:

9.6.1 Passing Structures by Value

When you pass a structure by value, a copy of the structure is made. Any changes to the structure inside the function do not affect the original structure.

--------------------------------synatx------------------------------

 void functionName(structType structVariable);

---------------------------------------------------------------------

--------------------------------vs code - structvalue.c ---------------------

Explanation:

1.Include Standard I/O Library:

The program starts by including the standard input-output library stdio.h.

2.Define Structure:

A structure named Point is defined with two integer members: x and y.

3.Define Function:

A function printPoint is defined that takes a Point structure by value and prints its x and y members.

4.Main Function Begins:

The main() function begins execution.

5.Declare and Initialize Structure Variable:

A Point structure variable myPoint is declared and initialized with x set to 10 and y set to 20.

6.Call Function with Structure by Value:

The printPoint function is called, passing myPoint as an argument. This creates a copy of myPoint inside the printPoint function.

7.Function Execution (printPoint):

Inside the printPoint function, the x and y members of the passed Point structure are printed. Since the structure is passed by value, the original myPoint remains unchanged.

8.Main Function Resumes:

Control returns to the main() function after the printPoint function completes execution.

9.End of Program:

The main() function returns 0, indicating successful completion of the program.


9.6.2 Passing Structures by Reference 

When you pass a structure by reference, you pass a pointer to the structure. This way, any changes to the structure inside the function will affect the original structure.


-------------------------------------syntax-----------------------

void functionName(structType *structPointer);

------------------------------------------------------------------

--------------------------------vs code - structref.c ---------------------

Explanation:

1.Include Standard I/O Library:

The program starts by including the standard input-output library stdio.h.

2.Define Structure:

A structure named Point is defined with two integer members: x and y.

3.Define Function:

A function modifyPoint is defined that takes a pointer to a Point structure and modifies its x and y members.

4.Main Function Begins:

The main() function begins execution.

5.Declare and Initialize Structure Variable:

A Point structure variable myPoint is declared and initialized with x set to 10 and y set to 20.

6.Print Original Values:

The original values of myPoint (x = 10 and y = 20) are printed using printf.

7.Call Function with Structure by Reference:

The modifyPoint function is called, passing the address of myPoint (&myPoint) as an argument.

8.Function Execution (modifyPoint):

Inside the modifyPoint function, the x and y members of the Point structure 
9.pointed to by p are modified:
p->x is set to 15.
p->y is set to 25.

10.Main Function Resumes:

Control returns to the main() function after the modifyPoint function completes execution.

11.Print Modified Values:

The modified values of myPoint (x = 15 and y = 25) are printed using printf.

12.End of Program:

The main() function returns 0, indicating successful completion of the program.


9.7 Union

Defining a structure (struct) and a union (union) in C allows you to group different types of variables under a single name. However, they are used in different scenarios depending on whether you need to store multiple data items at the same time or just one data item at a time. 

A union in C is a user-defined data type that allows storing different data types in the same memory location. Unions provide an efficient way of using the same memory location for multiple purposes.


-------------------------------syntax----------------------------------

typedef union {
    // Members of the union
    int member1;
    float member2;
    char member3;
} UnionName;

--------------------------------------------------------------------

----------------------------------------vs code - union.c ----------------

Explanation:

1.Include Header:

The program starts by including the standard input-output header file #include <stdio.h>.

2.Define DataUnion:

The typedef union DataUnion is defined to hold three types of data: an integer (intValue), a float (floatValue), and a char (charValue).

3.Define DataStruct:

The typedef struct DataStruct is defined to hold the same three types of data: an integer (intValue), a float (floatValue), and a char (charValue).

4.Main Function:

The main function begins execution.

5.Declare Variables:

Two variables, myUnion of type DataUnion and myStruct of type DataStruct, are declared.

6.Assign Values to Union:

The integer value 42 is assigned to myUnion.intValue.

7.Assign Values to Struct:

The integer value 42 is assigned to myStruct.intValue.
The float value 3.14f is assigned to myStruct.floatValue.
The char value 'A' is assigned to myStruct.charValue.

8.Print Union Memory Locations:

The memory locations of the union members (intValue, floatValue, and charValue) are printed. These addresses will be the same, showing that all members of a union share the same memory space.

9.Print Struct Memory Locations:

The memory locations of the struct members (intValue, floatValue, and charValue) are printed. These addresses will be different, showing that each member of a structure has its own separate memory space.

10.Return Statement:

The main function ends and returns 0, indicating successful execution.



9.8 Understanding of memory allocation


9.8.1 malloc

Allocates a block of memory of a specified size. The memory is uninitialized.

---------------------------synatx---------------------------------

void* malloc(size_t size);

-------------------------------------------------------------------


9.8.2 calloc

Allocates a block of memory for an array of elements and initializes all bytes to zero.

---------------------------synatx---------------------------------

void* calloc(size_t num, size_t size);

-------------------------------------------------------------------


9.8.3 free

Deallocates the memory previously allocated by malloc or calloc.

---------------------------synatx---------------------------------

void free(void *ptr);

-------------------------------------------------------------------

9.8.4 Size_t & %zu

Definition: 

size_t is an unsigned integer type used to represent sizes and counts in memory. It is commonly used for array indexing and loop counting.

---------------------------synatx---------------------------------

size_t variableName;

-------------------------------------------------------------------

When using printf or similar functions to output a size_t value, %zu should be used to avoid type mismatch issues and ensure proper formatting.

----------------------------------------vs code - alloc.c ----------------

Explanation:

1.Include Header Files:

#include <stdio.h>: Includes the standard I/O library for input and output functions.
#include <stdlib.h>: Includes the standard library for dynamic memory allocation functions (malloc, calloc, free).

2.Main Function Begins:

int main() {: Starts the definition of the main function.

3.Declare Variables:

int num = 10;: Initializes an integer variable num with the value 10.
int *ptr;: Declares a pointer ptr to an integer.

4.Use sizeof to Determine Size:

printf("Size of int: %zu bytes\n", sizeof(int));: Prints the size of an int in bytes using the %zu format specifier to correctly display size_t values.

5.Allocate Memory Using malloc:

ptr = (int*) malloc(sizeof(int));: Allocates memory for one int and assigns the pointer to ptr.
if (ptr == NULL) {: Checks if memory allocation was successful.
printf("Memory allocation failed using malloc\n");: Prints an error message if allocation failed.
return 1;: Exits the program with an error code 1.

6.Assign and Print Value Using malloc:

*ptr = num;: Assigns the value of num to the allocated memory.
printf("Value at allocated memory using malloc: %d\n", *ptr);: Prints the value stored in the allocated memory.

7.Free Allocated Memory:

free(ptr);: Frees the memory allocated by malloc.
ptr = NULL;: Sets the pointer to NULL to avoid a dangling pointer.

8.Allocate Memory Using calloc:

int *arr = (int*) calloc(5, sizeof(int));: Allocates memory for an array of 5 integers, initializing all elements to 0, and assigns the pointer to arr.
if (arr == NULL) {: Checks if memory allocation was successful.
printf("Memory allocation failed using calloc\n");: Prints an error message if allocation failed.
return 1;: Exits the program with an error code 1.

9.Print Initial Values from calloc:

printf("Values in allocated array using calloc:\n");: Prints a header for the values.
for (int i = 0; i < 5; i++) {: Loops through the array indices.
printf("arr[%d] = %d\n", i, arr[i]);: Prints the initial values (which should be 0).

10.Assign Values to the Array:

for (int i = 0; i < 5; i++) {: Loops through the array indices.
arr[i] = i * 10;: Assigns new values to the array elements.

11.Print Updated Values from calloc:

printf("Updated values in allocated array using calloc:\n");: Prints a header for the updated values.
for (int i = 0; i < 5; i++) {: Loops through the array indices.
printf("arr[%d] = %d\n", i, arr[i]);: Prints the updated values.

12.Free Allocated Memory:

free(arr);: Frees the memory allocated by calloc.

13.End of Main Function:

return 0;: Exits the program with a success code 0.












