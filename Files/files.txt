10 File creation

File

A file is a container in a computer system used to store data, such as text, images, or binary data. Files are typically organized into directories or folders on a storage device like a hard drive, SSD, or USB drive. Each file has a name and an extension that often indicates its format (e.g., .txt, .jpg, .exe).

Key Characteristics of Files:

Name: Identifies the file. It usually includes a file extension that indicates the file type.
Size: The amount of data stored in the file.
Type: Defines the format or content of the file (e.g., text, image, video).
Location: Path where the file is stored on the storage device.
Permissions: Determines who can read, write, or execute the file.
File Modes
File modes specify how a file should be accessed and manipulated by a program. They dictate whether a file is opened for reading, writing, or appending data, and what happens if the file does not exist or already exists. Different modes can affect the fileâ€™s contents and attributes.


-------------------------drawio table -------------------


Mode	Description
r	Read Mode: Opens the file for reading only. If the file does not exist, it returns an error.
w	Write Mode: Opens the file for writing. If the file exists, it truncates the file to zero length. If it does not exist, a new file is created.
a	Append Mode: Opens the file for writing, but data is appended to the end of the file. If the file does not exist, a new file is created.
r+	Read/Write Mode: Opens the file for both reading and writing. The file must exist.
w+	Write/Read Mode: Opens the file for both writing and reading. If the file exists, it truncates the file. If it does not exist, a new file is created.
a+	Append/Read Mode: Opens the file for both reading and appending. Data is appended to the end of the file. If the file does not exist, a new file is created.

------------------------------------------------------------------------


10.1 File pointers

In C programming, a file pointer is used to manage and manipulate files. It provides a way for a program to access files and perform operations such as reading from, writing to, or closing files.


10.2 fopen and fclose


fopen: 
A function used to open a file. It returns a file pointer that is used to reference the file in subsequent operations.

-------------------------Syntax: ------------------------------

FILE *fopen(const char *filename, const char *mode);

Parameters:
filename: The name of the file to be opened.
mode: The mode in which to open the file (e.g., "r", "w", "a").

----------------------------------------------------------------

fclose: 
A function used to close an open file. It takes the file pointer as an argument and releases the resources associated with it.

-----------------------------Syntax: -----------------------------------

int fclose(FILE *stream);

Parameters:
stream: The file pointer that identifies the file to be closed.

-------------------------------------------------------------------------

10.3 fscanf and fprintf

1.fscanf

Definition: fscanf is used to read formatted input from a file. It reads data from a file and stores it in variables according to specified format strings.

-----------------------------Syntax: -----------------------------------

int fscanf(FILE *stream, const char *format, ...);

stream: A pointer to a FILE object that identifies the input file.
format: A format string that specifies the expected format of the input.
...: Variables where the read values are stored.

-------------------------------------------------------------------------

2.fprintf

Definition: fprintf is used to write formatted output to a file. It writes data to a file in a specified format, similar to how printf writes to the console.

-----------------------------Syntax: -----------------------------------

int fprintf(FILE *stream, const char *format, ...);

stream: A pointer to a FILE object that identifies the output file.
format: A format string that specifies how the output should be formatted.
...: Values to be formatted and written to the file.

-------------------------------------------------------------------------

3.Why Use fscanf and fprintf

Formatted Input/Output: Both functions allow for formatted data input and output. This makes it easier to handle data in a structured way.
Convenience: They handle various data types and formats, making it simple to read and write complex data structures.

10.4 fseek

The fseek function in C is used to reposition the file pointer within a file. This function allows you to move the file pointer to a specific location, enabling random access within the file.

SEEK_SET: 
The beginning of the file. offset is the absolute position from the start of the file.

SEEK_CUR: 
The current position of the file pointer. offset is added to or subtracted from this position.

SEEK_END: 
The end of the file. offset is relative to the end of the file. A positive offset moves the pointer past the end, while a negative offset moves it before the end.

-----------------------------Syntax: -----------------------------------

int fseek(FILE *stream, long offset, int whence);

stream: A pointer to the FILE object that identifies the stream (file) to be accessed.
offset: The number of bytes to move the file pointer relative to the position specified by whence.
whence: The reference position for offset. It can be one of the following constants:

-------------------------------------------------------------------------

Use of fseek:

1.Repositioning for Reading/Writing:

After writing data to a file, the file pointer is at the end of the file. To read the data that was just written, you need to move the file pointer back to the beginning.

2.Random Access:

fseek allows you to move the file pointer to any position within the file, enabling you to read or write data at specific locations without having to process the file sequentially.


10.5 File Modes

10.5.1 r (Read Mode):

Description: Opens a file for reading only. The file must exist; otherwise, the function returns NULL.

---------------syntax-------------------------

FILE *fopen(const char *filename, "r");

----------------------------------------------

----------------------vs code read.c ----------------------------


Explanation:

1.Include Header File: 
Includes the standard I/O library for file operations.

2.Define Main Function: 
The entry point of the program.

3.Declare Variables:
Declare file as a FILE pointer.
Declare buffer as a character array.

4.Open File for Reading:
Attempt to open example.txt in read mode.
Check if the file was successfully opened.
Print an error message and exit if the file cannot be opened.

5.Read and Print Content:
Read lines from the file into buffer.
Print each line until the end of the file is reached.

6.Close the File: 
Close the file and release resources.

7.Terminate Program: 
End the program and return 0 to indicate successful execution.



10.5.2 Write Mode (w)

This program opens a file for writing, writes some text to it, and then closes the file.


---------------syntax-------------------------

FILE *fopen(const char *filename, "w");

----------------------------------------------

----------------------vs code write.c ----------------------------


Explanation:

1.Include Header File: 
Includes the standard I/O library for file operations.

2.Define Main Function: 
The entry point of the program.

3.Declare File Pointer:
Declare file as a FILE pointer.

4.Open File for Writing:
Attempt to open example.txt in write mode ("w").
Check if the file was successfully opened.
Print an error message and exit if the file cannot be opened.

5.Write to the File:
Write the string "Hello, World!\n" to the file using fprintf.

6.Close the File:
Close the file and release resources.

7.Terminate Program:
End the program and return 0 to indicate successful execution.



10.5.3 Append Mode (a)

It opens a file for appending and adds some text to the end of the file.

---------------syntax-------------------------

FILE *fopen(const char *filename, "a");

----------------------------------------------

----------------------vs code append.c ----------------------------


Explanation:

1.Include Header File: 
Includes the standard I/O library for file operations.

2.Define Main Function: 
The entry point of the program.

3.Declare File Pointer:
Declare file as a FILE pointer.

4.Open File for Appending:
Attempt to open example.txt in append mode ("a").
Check if the file was successfully opened.
Print an error message and exit if the file cannot be opened.

5.Append to the File:
Write the string "Appending this line.\n" to the end of the file using fprintf.

6.Close the File:
Close the file and release resources.

7.Terminate Program:
End the program and return 0 to indicate successful execution.



10.5.4 Read/Write Mode (r+):

Opens a file for both reading and writing. The file must exist; otherwise, the function returns NULL. 

---------------syntax-------------------------

FILE *fopen(const char *filename, "r+");

----------------------------------------------

----------------------vs code rw.c ----------------------------

Explanation:

1.Include Header File:

Includes the standard I/O library for file operations.

2.Define Main Function:

The entry point of the program.

3.Declare Variables:

Declare file as a FILE pointer.
Declare buffer as a character array to hold data read from the file.

4.Open File for Reading and Writing:

Attempt to open example.txt in read/write mode ("r+").
Check if the file was successfully opened.
Print an error message and exit if the file cannot be opened.

5.Read and Print Current Content:

Use fgets to read lines from the file into buffer.
Print each line read from the file until the end of the file is reached.

6.Move File Pointer to Beginning:

Use fseek(file, 0, SEEK_SET) to move the file pointer back to the beginning of the file.

7.Write New Content to the File:

Use fprintf to write the string "This is new content.\n" to the file.

8.Close the File:

Close the file and release resources.

9.Terminate Program:

End the program and return 0 to indicate successful execution.



10.5.5 Write/Read Mode (w+):

Opens a file for both writing and reading. If the file exists, it is truncated. If it does not exist, a new file is created.

---------------syntax-------------------------

FILE *fopen(const char *filename, "w+");

----------------------------------------------

----------------------vs code wr.c ----------------------------

Explanation:

1.Include Header File:

Includes the standard I/O library for file operations.

2.Define Main Function:

The entry point of the program.

3.Declare File Pointer:

Declare file as a FILE pointer.

4.Open File for Writing and Reading:

Attempt to open example.txt in write/read mode ("w+").
If the file is opened successfully, file points to the file stream.
If the file cannot be opened (e.g., due to permissions issues or file system problems), fopen returns NULL, and an error message is printed using perror. The program then returns 1 to indicate an error.

5.Write New Content to the File:

Use fprintf(file, "New content written to file.\n"); to write the string "New content written to file.\n" to the file.

6.Move the File Pointer to the Beginning:

Use fseek(file, 0, SEEK_SET); to reposition the file pointer to the beginning of the file, so the newly written content can be read back.

7.Read and Print the Content:

Use fgets(buffer, sizeof(buffer), file) to read lines from the file into buffer.
Print each line read from the file until the end of the file is reached.

8.Close the File:

Use fclose(file); to close the file and release system resources.

9.Terminate Program:

End the program and return 0 to indicate successful execution.



10.5.6 Append/Read Mode (a+):

Opens a file for both reading and appending. Data is added to the end of the file. If the file does not exist, a new file is created.

---------------syntax-------------------------

FILE *fopen(const char *filename, "a+");

----------------------------------------------

----------------------vs code ar.c ----------------------------

Explanation:

1.Include Header File:

Includes the standard I/O library for file operations.

2.Define Main Function:

The entry point of the program.

3.Declare File Pointer:

Declare file as a FILE pointer.

4.Open File for Appending and Reading:

Attempt to open example.txt in append/read mode ("a+").
If the file is successfully opened, file points to the file stream.
If the file cannot be opened (e.g., due to permission issues or file system problems), fopen returns NULL, and an error message is printed using perror. The program then returns 1 to indicate an error.

5.Append New Content to the File:

Use fprintf(file, "Appending more content.\n"); to append the string "Appending more content.\n" to the end of the file.

6.Move the File Pointer to the Beginning for Reading:

Use fseek(file, 0, SEEK_SET); to reposition the file pointer to the beginning of the file. This is necessary because, after opening the file in append mode, the file pointer is positioned at the end of the file.

7.Read and Print the Content:

Use fgets(buffer, sizeof(buffer), file) to read lines from the file into buffer.
Print each line read from the file until the end of the file is reached.

8.Close the File:

Use fclose(file); to close the file and release system resources.

9.Terminate Program:

End the program and return 0 to indicate successful execution.



10.6 Standard input and output:


Standard input and output in C are essential for interacting with users and external systems, allowing programs to receive data from the user (standard input) and display results (standard output). These mechanisms provide a consistent and platform-independent way to handle input and output operations. They enable dynamic data exchange, making programs flexible and versatile.


1.Input Functions:


10.6.1 fgetc:

Reads a single character from a specified file stream.Ideal for character-by-character file reading.

-----------------------------------syntax---------------

int fgetc(FILE *stream);

----------------------------------------------------------


10.6.2 fgets:

Reads a string from a specified file stream, up to a newline or specified length.Useful for reading lines of text from a file.


-----------------------------------syntax---------------

fgets(buffer, int n, FILE *stream);

----------------------------------------------------------


10.6.3 fread:

Reads binary data from a file into an array.Efficient for reading multiple elements at once.

-----------------------------------syntax---------------

fread(buffer, int n, size, FILE *stream);

----------------------------------------------------------


10.6.4 fscanf:

Reads formatted input from a file.Parses data according to a specified format.Returns the number of input items successfully matched and assigned.

-----------------------------------syntax---------------

fscanf(FILE *stream, const char *format, ...);

----------------------------------------------------------


2.Output Functions:

10.6.5 fputc:

Writes a single character to a specified file stream.Useful for character-by-character file manipulation.

-----------------------------------syntax---------------

fputc(int character, FILE *stream);

----------------------------------------------------------


10.6.6 fputs:

Writes a null-terminated string to a specified file stream.Simplifies the process of writing strings to files.

-----------------------------------syntax---------------

fputs(const char *str, FILE *stream);

----------------------------------------------------------


10.6.7 fwrite:

Writes binary data from an array to a file.Efficient for writing multiple elements at once.

-----------------------------------syntax---------------

fwrite(const void *ptr, size(char), string_length , FILE *stream);

----------------------------------------------------------


10.6.8 fprintf:

Writes formatted output to a file.Formats data according to a specified format.

-----------------------------------syntax---------------

fprintf(FILE *stream, const char *format, ...);

----------------------------------------------------------

-----------------------------vs code std.c --------------------------


Explanation:

1.Opening File for Writing:

The file example.txt is opened for writing (w mode).
If the file cannot be opened, an error message is printed and the program terminates with an exit code of 1.

2.Writing to the File:

fputc('A', file); writes the character 'A' to the file.
fputs("Hello, World!\n", file); writes the string "Hello, World!\n" to the file.
fprintf(file, "Number: %d\n", 42); writes the formatted string "Number: 42\n" to the file.
The file is then closed.

3.Opening File for Reading and Writing:

The file example.txt is opened for reading and writing (r+ mode).
If the file cannot be opened, an error message is printed and the program terminates with an exit code of 1.

4.Reading from the File:

int c = fgetc(file); reads the first character from the file and stores it in c. It prints "Read character: A".

5.Resetting File Pointer and Reading a String:

fseek(file, 0, SEEK_SET); moves the file pointer to the beginning of the file.
fgets(buffer, sizeof(buffer), file); reads a string from the file into buffer and prints "Read string: AHello, World!\n".

6.Resetting File Pointer and Reading Data:

fseek(file, 0, SEEK_SET); moves the file pointer to the beginning of the file.
fread(buffer, sizeof(char), 13, file); reads 13 characters from the file into buffer.
The buffer is null-terminated and prints "Read data: AHello, World!".

7.Appending Data to the File:

fseek(file, 0, SEEK_END); moves the file pointer to the end of the file.
fwrite(data, sizeof(char), strlen(data), file); writes the string "Appending data" to the file.
The file is closed.

8.Reopening File for Reading:

The file example.txt is opened for reading (r mode).
If the file cannot be opened, an error message is printed and the program terminates with an exit code of 1.

9.Reading Formatted Input:

fscanf(file, "%s", buffer); reads the first word from the file into buffer and prints "Read formatted input: AHello,".

10.Closing the File:

The file is closed.



10.7 C Errors 


Predefined Error Codes in errno.h:

The errno.h header file contains definitions for a variety of error codes that can be set by system calls and library functions when an error occurs. Each error code has a unique integer value and a corresponding symbolic name.


10.7.1 perror


Purpose: 

The perror function prints a descriptive error message to the standard error stream  

Usage:

It is used to provide a human-readable message explaining why a certain error occurred.The message printed by perror includes the string passed to it, followed by a colon, a space, and the textual representation.

-------------------------------syntax-----------------------------------------

void perror(const char *s);

---------------------------------------------------------------------------


10.7.2 strerror


Purpose: 

The strerror function returns a pointer to the textual representation of the error code passed to it.

Usage:

It is used to convert an error number (errno) into a human-readable string.This is particularly useful for logging or displaying error messages programmatically without using perror.


-------------------------------syntax-----------------------------------------

char *strerror(int errnum);

---------------------------------------------------------------------------


----------------------------vs code error.c---------------------------

Explanation:

1.Include Headers:

The program includes necessary header files: stdio.h for standard I/O functions, errno.h for error handling, and string.h for string functions.

2.Declare Variables:

A FILE pointer file is declared to handle the file operations.
An integer i is declared for use in the loop later.

3.Attempt to Open a File:

The fopen function is called to open a file named "no.file" in read mode ("r").
The result is assigned to the file pointer.

4.Check File Opening Result:

If the file is successfully opened (file != NULL), it prints "File opened".
If the file is not successfully opened (file == NULL), it prints an error message using perror("Error"). This prints the string "Error" followed by a description of the error based on the current errno value (likely "No such file or directory" in this case).

5.Loop to Print Error Messages:

A for loop runs from 0 to 19.
For each value of i, it prints the error number (i) and its corresponding error message using strerror(i).
strerror(i) returns a string that describes the error code i.

6.End of Program:

The program ends and returns 0 to indicate successful execution.



10.8 C Date and Time

The time.h header file in C provides various functions and types to manipulate and format time and date values. It includes functions for retrieving the current time, converting between different time representations, and formatting time and date strings.

1.time_t:

Standard Data Type: 

time_t is a standard type defined by the C standard library, not a user-defined type. It is designed to be portable across different systems, providing a consistent way to represent and manipulate time.

Type: 

time_t is an arithmetic data type, typically defined as a long or an int on many systems, but the exact implementation can vary. It represents the number of seconds elapsed since the Unix epoch (January 1, 1970, at midnight UTC).


---------------table-Key Functions in time.h----------------------------------------

Components of tm Structure

The tm structure holds the date and time broken down into its components. It is defined in time.h as follows:

struct tm {
    int tm_sec;   // Seconds [0, 60] (including leap second)
    int tm_min;   // Minutes [0, 59]
    int tm_hour;  // Hour [0, 23]
    int tm_mday;  // Day of the month [1, 31]
    int tm_mon;   // Month of the year [0, 11] (January = 0)
    int tm_year;  // Years since 1900
    int tm_wday;  // Day of the week [0, 6] (Sunday = 0)
    int tm_yday;  // Day of the year [0, 365]
    int tm_isdst; // Daylight saving time flag
};


-------------------table- tm structure----------------------------------------------


Explanation:

1.Include Header Files:

#include <stdio.h>: Includes the Standard I/O library.
#include <time.h>: Includes the time library for time functions.

2.Function main:

Variable Declarations:

time_t rawtime;: Variable to store the raw time in seconds.
struct tm *timeinfo;: Pointer to a tm structure for storing local and UTC time information.
char buffer[80];: Character array to hold the formatted time string.

3.Get the Current Time:

time(&rawtime);: Fetches the current calendar time (seconds since the epoch) and stores it in rawtime.

4.Convert to Local Time:

timeinfo = localtime(&rawtime);: Converts rawtime to a tm structure representing the local time.

5.Print Local Time Using asctime:

printf("Current local time: %s", asctime(timeinfo));: Converts the tm structure to a string and prints the local time in a readable format.

6.Format Time Using strftime:

strftime(buffer, sizeof(buffer), "Formatted date and time: %Y-%m-%d %H:%M:%S", timeinfo);: Formats the local time into a custom string format and stores it in buffer.
printf("%s\n", buffer);: Prints the formatted date and time.

7.Get UTC Time:

timeinfo = gmtime(&rawtime);: Converts rawtime to a tm structure representing Coordinated Universal Time (UTC).

8.Print UTC Time Using asctime:

printf("Current UTC time: %s", asctime(timeinfo));: Converts the UTC tm structure to a string and prints the UTC time in a readable format.

9.Return Statement:

return 0;: Ends the main function and returns 0 to indicate successful completion.




10.9 Genarating random numbers


The stdlib.h library in C provides a range of functions for performing general utility operations such as memory allocation, process control, conversions, and others. Two important functions in this library are rand and srand.

1.rand Function

Purpose: The rand function generates pseudo-random numbers.

Range: It returns an integer value between 0 and RAND_MAX (a constant defined in <stdlib.h>).

Deterministic Sequence: Without proper seeding, rand produces the same sequence of numbers each time the program is run.

---------------------------------------syntax-----------------------------

int rand();

---------------------------------------------------------------------------


2.srand Function


Purpose: The srand function sets the starting point for producing a series of pseudo-random integers by rand.

Seeding: By providing a different seed value (often the current time), you ensure that rand generates a different sequence of numbers on each run.

Initialization: If srand is not called before rand, the generator behaves as if srand(1) was called, leading to a predictable sequence of numbers.

---------------------------------------syntax-----------------------------

void srand(unsigned int seed);

---------------------------------------------------------------------------

-----------------------------vs code rand.c -----------------------------------

Explanation:

1.Include Header Files:

The program starts by including the necessary header files: <stdio.h>, <stdlib.h>, and <time.h>.

2.Function main:

The main function is defined and begins execution.

3.Variable Declaration:

int i; is declared for use in the loop that generates random numbers.

4.Seed the Random Number Generator:

srand(time(NULL)); seeds the random number generator with the current time. This ensures that the random numbers generated will be different each time the program runs.

5.Print Header:

printf("Three-digit random numbers:\n"); prints a header message to the console.

6.Generate and Print Three-Digit Random Numbers:

A for loop runs 5 times to generate and print 5 three-digit random numbers.

7.Inside the Loop:

Step 1: Generate a raw random number using rand().
int raw_random_number = rand();
Step 2: Apply the modulus operation to limit the range to 0-899.
int limited_random_number = raw_random_number % 900;
Step 3: Shift the range to 100-999.
int random_number = limited_random_number + 100;
Print the final three-digit random number.
printf("%d\n", random_number);

8.Loop Iterations:

Steps 7.1 to 7.4 are repeated for each iteration of the loop (5 times in total).

9.End of Program:

After the loop completes, the program reaches the return 0; statement, signaling successful completion of the program.



10.10 Windows API (WinAPI)

Definition: 
The Windows API (WinAPI) is a set of Microsoft Windows operating system interfaces that allows applications to interact with the operating system and other software. It provides a wide range of functions for performing tasks such as managing windows, handling user input, accessing files, and more.

WinAPI is used in native Windows applications written in languages like C or C++ to create robust, efficient applications that can interact directly with the Windows operating system.

10.10.1 windows.h:

Definition: windows.h is a header file that includes declarations for all the functions, constants, and data types provided by the Windows API. It provides access to various Windows functions for managing windows, handling messages, working with files, and more.

Purpose: It allows developers to interact with the Windows operating system by including necessary declarations for WinAPI functions and structures.

10.10.2 WINAPI:

Definition: WINAPI is a macro used to specify the calling convention for functions in the Windows API.


10.10.3 WinMain:

Definition: WinMain is the entry point for a Windows application. It is the function that the Windows operating system calls to start a Windows-based application.

Purpose: It is analogous to the main function in console applications but is specifically used for Windows GUI applications.


10.10.4 HINSTANCE hInstance:

Definition: HINSTANCE is a handle to an instance of the application. It uniquely identifies the applicationâ€™s executable file and provides context for resource management.


10.10.5 HINSTANCE hPrevInstance:

Definition: HINSTANCE hPrevInstance is a handle to the previous instance of the application. In modern versions of Windows, this parameter is always NULL because multiple instances of a Windows application do not require this handle.


10.10.6 LPSTR lpCmdLine:

Definition: LPSTR is a pointer to a string that contains the command-line arguments passed to the application.

Purpose: It allows the application to receive and process command-line arguments when it starts.


10.10.7 int nCmdShow:

Definition: nCmdShow is an integer that specifies how the application window should be shown (e.g., minimized, maximized, or normal).

Purpose: It provides instructions on how to display the application's main window based on the user's or system's preferences.


10.10.8 MB_OK | MB_ICONINFORMATION:

Definition: These are flags used in the MessageBox function to specify the type of buttons and icons to display in the message box.
MB_OK adds an OK button to the message box.
MB_ICONINFORMATION displays an information icon.

Purpose: To customize the appearance and functionality of the message box, making it suitable for displaying information messages to the user.


-----------------------------syntax for dialog box------------------------


#include <windows.h>

// Entry point for the application
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    // Display a message box with a simple message
    MessageBox(
        NULL,               // hWnd: Handle to the owner window (NULL if no owner)
        "Message user want to print",    // lpText: The message to be displayed
        "Message Box Title",// lpCaption: The title of the message box
        MB_OK | MB_ICONINFORMATION // uType: The buttons and icons to be included in the message box
    );

    return 0;
}

----------------------------------------------------------------------------------


----------------------------------vs code win.c-----------------------------

Explanation:

1.Include the Windows Header File:

#include <windows.h>: This line includes the Windows API header file, which contains declarations for all the functions and data types used in Windows programming.

2.Entry Point for the Application:

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow):
This is the entry point for a Windows application. It is similar to the main function in console applications.

3.Parameters:
hInstance: Handle to the current instance of the application.
hPrevInstance: Handle to the previous instance of the application (always NULL in modern Windows).
lpCmdLine: Pointer to a null-terminated string specifying the command line for the application.
nCmdShow: Specifies how the window is to be shown (ignored in this code).

4.Display a Message Box:

MessageBox(NULL, "Hello, World!", "Message Box Title", MB_OK | MB_ICONINFORMATION);:
This function call creates and displays a message box.

5.Parameters:

NULL: No owner window.
"Hello, World!": The text message to be displayed in the message box.
"Message Box Title": The title of the message box.
MB_OK | MB_ICONINFORMATION: Flags that specify the contents and behavior of the message box. MB_OK creates an OK button, and MB_ICONINFORMATION displays an information icon.
The function displays the message box and waits for the user to click the OK button.

6.Return from the Application:

return 0;: The application returns 0, indicating that it has completed successfully.
































