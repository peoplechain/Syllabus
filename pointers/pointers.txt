7 Pointers

7.1 Definition:

A pointer is a variable that stores the memory address of another variable. Pointers are used to directly access and manipulate the memory address of other variables, enabling efficient array and string manipulation, dynamic memory allocation, and implementation of data structures like linked lists and trees.

7.2 Why Use Pointers:

Dynamic Memory Allocation: 
Pointers are essential for dynamic memory management 

Low-Level Memory Access: 
Pointers provide the ability to perform low-level memory manipulation

7.3 Define Pointer Variables

Declaration:

A pointer variable is declared using the asterisk (*) symbol before the variable name. The type of pointer determines the type of data it can point to.

------------------------------syntax------------------------

type *pointer_name;

------------------------------------------------

Initialization:

A pointer can be initialized to the address of an existing variable using the address-of operator (&). The address-of operator (&) is used to obtain the memory address of a variable.

------------------------------syntax------------------------

pointer_variable = &variable;

------------------------------------------------

---------------------example vs code - ptr.c ---------------------


Explanation:

1.Start of main Function:

Execution begins at the main function.

2.Variable Declaration and Initialization:

int x = 10;
An integer variable x is declared and initialized to 10.
int *ptr = &x;
A pointer variable ptr is declared and initialized with the address of x.

3.Print the Value of the Regular Variable:

printf("Value of x: %d\n", x);
The printf function is called to print the value of x.
Output: Value of x: 10.

4.Print the Storage Address of the Regular Variable:

printf("Address of x: %p\n", (void*)&x);
The printf function is called to print the address of x.
The &x expression gets the address of x.
(void*)&x casts the address to void* for proper format.
Output: Address of x: <address> (the actual address value will vary).

5.Print the Address Contained in the Pointer Variable:

printf("Address stored in ptr: %p\n", (void*)ptr);
The printf function is called to print the address stored in ptr.
ptr contains the address of x.
(void*)ptr casts the address to void* for proper format.
Output: Address stored in ptr: <address> (should be the same as the address of x).

6.Print the Value Contained at the Address Stored in the Pointer Variable:

printf("Value pointed to by ptr: %d\n", *ptr);
The printf function is called to print the value at the address stored in ptr.
The *ptr expression dereferences the pointer to get the value stored at that address.
Since ptr points to x, *ptr yields the value of x, which is 10.
Output: Value pointed to by ptr: 10.

7.End of main Function:

The main function returns 0.
Program execution ends.



7.4 Pointer Arithmetic in C

Pointer arithmetic is the process of performing operations such as addition and subtraction on pointer variables. Understanding pointer arithmetic is crucial for efficient array and memory manipulation in C. Hereâ€™s the content for teaching pointer arithmetic:

Introduction to Pointer Arithmetic

Pointer arithmetic involves the following operations:

1.Incrementing and Decrementing Pointers
2.Adding and Subtracting Integers to/from Pointers
3.Subtracting Two Pointers

7.4.1 Incrementing a Pointer:

When you increment a pointer, it points to the next element of its type in memory.The amount by which the pointer is incremented depends on the size of the data type it points to.


-------------------synatx------------------------------------

pointer++;

--------------------------------------------------------------

7.4.2 Decrementing a Pointer:

When you decrement a pointer, it points to the previous element of its type in memory.

-------------------synatx------------------------------------

pointer--;

--------------------------------------------------------------

7.4.3 Adding an Integer to a Pointer:

Adding an integer to a pointer advances the pointer by that number of elements.

-------------------synatx------------------------------------

pointer += n;

--------------------------------------------------------------

7.4.4 Subtracting an Integer from a Pointer:

Subtracting an integer from a pointer moves the pointer back by that number of elements.

-------------------synatx------------------------------------

pointer -= n;

--------------------------------------------------------------

7.4.5 Subtracting Two Pointers:

Subtracting two pointers gives the number of elements between the two addresses.

-------------------synatx------------------------------------

difference = pointer1 - pointer2;

--------------------------------------------------------------


---------------------example vs code - arithptr.c ----------------


Explanation:

1.Start of main Function:

Execution begins at the main function.

2.Array Declaration and Initialization:

int arr[5] = {1, 2, 3, 4, 5};
An array arr of 5 integers is declared and initialized with the values {1, 2, 3, 4, 5}.

3.Pointer Initialization:

int *ptr = arr;
A pointer variable ptr is declared and initialized to point to the first element of arr (i.e., arr[0]).

4.Print Initial Value Pointed by ptr:

printf("Initial value: %d\n", *ptr);
The printf function prints the value pointed to by ptr, which is 1.
Output: Initial value: 1

5.Incrementing the Pointer:

ptr++;
The pointer ptr is incremented to point to the next element in the array (i.e., arr[1]).

6.Print Value After Incrementing the Pointer:

printf("After incrementing: %d\n", *ptr);
The printf function prints the value pointed to by ptr after incrementing, which is 2.
Output: After incrementing: 2

7.Adding an Integer to the Pointer:

ptr += 2;
The pointer ptr is advanced by 2 elements in the array (i.e., now points to arr[3]).

8.Print Value After Adding 2 to the Pointer:

printf("After adding 2: %d\n", *ptr);
The printf function prints the value pointed to by ptr after adding 2, which is 4.
Output: After adding 2: 4

9.Subtracting an Integer from the Pointer:

ptr -= 1;
The pointer ptr is moved back by 1 element in the array (i.e., now points to arr[2]).

10.Print Value After Subtracting 1 from the Pointer:

printf("After subtracting 1: %d\n", *ptr);
The printf function prints the value pointed to by ptr after subtracting 1, which is 3.
Output: After subtracting 1: 3

11.Pointer Initialization for Subtraction:

int *ptr1 = &arr[4];
A pointer variable ptr1 is declared and initialized to point to the fifth element of arr (i.e., arr[4]).
int *ptr2 = arr;
A pointer variable ptr2 is declared and initialized to point to the first element of arr (i.e., arr[0]).

12.Subtracting Two Pointers:

int difference = ptr1 - ptr2;
The difference between ptr1 and ptr2 is calculated, which gives the number of elements between them in the array.

13.Print the Difference Between Two Pointers:

printf("Difference between ptr1 and ptr2: %d\n", difference);
The printf function prints the difference, which is 4.
Output: Difference between ptr1 and ptr2: 4

14.End of main Function:

The main function returns 0.
Program execution ends.


7.5 Passing Pointers to Functions in C

Passing pointers to functions in C allows functions to modify the original variables and work efficiently with large data structures like arrays. This method avoids making copies of large data, improving performance.


-----------------------------syntax-------------------

void functionName(type *pointer);

------------------------------------------------

------------vs code - passptr.c --------------------------

Explanation:

1.Start of main Function:

Execution begins at the main function.

2.Variable Declaration and Initialization:

int x = 10;
An integer variable x is declared and initialized to 10.

3.Print Original Value:

printf("Original value of x: %d\n", x);
The printf function prints the original value of x, which is 10.
Output: Original value of x: 10

4.Function Call with Pointer Argument:

updateValue(&x);
The updateValue function is called with the address of x passed as an argument.

5.Start of updateValue Function:

Execution moves to the updateValue function with the pointer ptr pointing to x.

6.Update Value via Pointer:

*ptr = 20;
The value at the address ptr points to is updated to 20.
Since ptr points to x, x is updated to 20.

7.Return to main Function:

Execution returns to the main function after updateValue completes.

8.Print Updated Value:

printf("Updated value of x: %d\n", x);
The printf function prints the updated value of x, which is 20.
Output: Updated value of x: 20

9.End of main Function:

The main function returns 0.
Program execution ends.


7.6 Creating Arrays of Pointers

Arrays of pointers in C are useful for managing collections of pointers to data, such as strings or other arrays. Each element in the array holds a pointer to a data element, providing flexibility and efficiency in memory management and data manipulation.

-------------------------------syntax--------------------

type *arrayName[size];

----------------------------------------------------------


-----------------------------vs code - ptrarr.c --------------------

Explanation:

1.Start of Program Execution:

The program starts executing from the main function.

2.Integer Array (ptrArray) Initialization:

int *ptrArray[3]; declares an array of 3 integer pointers.
int a = 10, b = 20, c = 30; initializes three integer variables.

3.Assigning Addresses to ptrArray Elements:

ptrArray[0] = &a;, ptrArray[1] = &b;, ptrArray[2] = &c; assigns addresses of a, b, and c to elements of ptrArray.

4.Printing Integer Values and Addresses:

Enters a loop to iterate through ptrArray.
Prints each integer value and its corresponding address stored in ptrArray.

5.String Array (names) Initialization:

char *names[3] = {"Alice", "Bob", "Charlie"}; initializes an array of 3 pointers to strings.

6.Printing Strings and Their Addresses:

Enters a loop to iterate through names.
Prints each string and its corresponding address stored in names.

7.End of Execution:

return 0; indicates successful completion of main.
Program execution ends.




















